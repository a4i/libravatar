Branding/homepage:
- find a good logo (maybe something based on this:
   http://commons.wikimedia.org/wiki/File:Peace_dove.svg ?)
- make a collage of the user photos in the shape of libravatar logo
   (the ones licensed under Creative Commons)
- document the Libravatar API
- come up with terms and conditions?
- write a comparison table of Libravatar & Gravatar features

Promotion (when we're ready):
- create Freshmeat account
- announce on autonomo.us list
- post presentation audio and slides on blog/slideshare?

Apache config:
- add reasonable caching headers to images
- find a way to set the mimetype to png when appropriate
   (using a mod_rewrite flag?)
- nginx version of the Apache config files

Federation:
- ability to specify both http and https servers in SRV records
   https://secure.wikimedia.org/wikipedia/en/wiki/SRV_record
- write a PHP? library for doing the DNS lookup before using
   libravatar.org
- create a test avatars.catalyst.net.nz server 
- create a test avatars.debian.net server with db.people.org auth
- add the ability for private/public images for each email address
   (i.e. internal images only displayed within company subnet)
- create a pool of servers to serve libravatar.org (cdn-like)
   maybe using MirrorBrain (http://mirrorbrain.org/)

Ties to other free network services:
- adbard.net support
- faif version of Google Analytics (http://blog.taragana.com/index.php/archive/httpblogtaraganacomindexphparchivetop-10-web-log-analysis-software/)

Storage:
- use git-like directories (first two hash characters is dirname)
- write an S3 backend
- write a file backend on a different server

Gearman:
- image optimisation/resizing/copying to happen via workers so that it
   can be scaled easily as demand increases

Content licensing:
- have a checkbox for "this image is CC-BY-SA" and a "different
   license" link (should we support "all rights reserved"?)
- licenses can be specified by clients like the G/PG/X Gravatar
   ratings and an image is hardlinked into all of the directories that
   make sense for the license (e.g. CC-BY is also in CC-SA and CC-ND)
- or perhaps licensing should be embedded into the files as EXIF comments
   (http://q-funk.blogspot.com/2010/08/batch-editing-exif-data-to-add.html)

Image resizing:
- when writing a resized image, create hardlinks to all hashes by
   looking up the inode number of the md5 using "ls -i" then finding
   the sha1 and sha256 using "find -mount -inum xxxxx"

Image optimisations:
- run jpegoptim or optipng on images

User sovereignty:
- ability to completely delete one's account
- "export my data" which uuencodes photos to XML along with email
   addresses
- "import my data" for moving between libravatar.org instances (email
   addresses will need to be re-validated presumably)

Admin:
- control page to review all new images (to prevent porn?)

Images:
- sanity checks for uploaded images (to make sure it's a valid jpeg/png)
- add support in the Django app for uploading PNGs
- image importer for Twitter and Launchpad (need to specify username)
- URL image downloader/importer
- provide a gallery of built-in images, like these ones:
   http://www.isity.net/blog/?p=65

Plugins/hooks:
- rss feeds to see when a user (based on sha256 hash) changes photos
- plugins for FOSS programs: StatusNet, Mahara, Launchpad, Wordpress,
   Drupal, Django, Moodle, Koha, ikiwiki, Thunderbird
   (https://addons.mozilla.org/en-US/thunderbird/addon/58034/)
   and pfaces (https://projects.pekdon.net/projects/pfaces)
- greasemonkey script to convert gravatar URLs to libravatar.org
- gnus (http://julien.danjou.info/blog/index.html#Gnus_and_Gravatar_support)

General Django app:
- internationalization of the Django UI and localization to French
   (then add the templates to Launchpad to be widly translated)

Secure image uploading:
- upload image to temp dir and resize in Javascript
- restrict serving that image to authenticated uploader
- put the image into an "incoming" folder (/var/spool/libravatar?)
- run optimisers/resizers as restricted UNIX user and then move image
   to a different "ready" folder
- finally the web server takes it from there and copies it to the
   apache docroot where it's served from

CLI admin interface:
- using Commandant (https://launchpad.net/commandant)
